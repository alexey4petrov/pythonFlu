#--------------------------------------------------------------------------------------
NEWS
#--------------------------------------------------------------------------------------

pythonFlu - Python wrapping for OpenFlux C++ API
Copyright (C) 2010- Alexey Petrov
Copyright (C) 2009-2010 Pebble Bed Modular Reactor (Pty) Limited (PBMR)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

See http://sourceforge.net/projects/pythonflu


---------------------------------------------------------------------------
New Features and Important Changes, 9.1-swig vs 9.0-porting

Author(s) :  Alexey PETROV

2012-06-20

1. Porting on the new generation of SWIG wrapper - 2.X (tested with 2.0.3 - 2.0.6)
  
2. Porting on the latest OpenCFD version of OpenFlux - 2.1.1

3. The following new solvers were implemented in Python :
    
    compressible/rhoPorousMRFLTSPimpleFlux
    
    compressible/rhoPorousMRFSimpleFlux
    
    compressible/rhoSimplecFlux
    
    heatTransfer/buoyantBoussinesqPimpleFlux
    
    heatTransfer/chtMultiRegionSimpleFlux
    
    incompressible/adjointShapeOptimizationFlux
    
    incompressible/MRFSimpleFlux
    
    incompressible/SRFPimpleFlux
    
    incompressible/SRFSimpleFlux


---------------------------------------------------------------------------
New Features and Important Changes, 9.0-porting vs r8.2-hybrid

Author(s) :  Alexey PETROV

2012-01-05

1. Porting on the latest version of OpenFlux - 2.1.0, 2.0.1,2.0.0
  
2. Porting on FreeFlux up to the 0.1.0rc5
  
3. Porting on MacOS X
  
4. Support for multi-fork and multi-version OpenFlux installations 
  
5. Moving installation procedure to "launchpad.net" (due to increased number of dependencies)
  
6. Full grown support for writing interactive applications (a special “managedFlu” intermediate 
    C++ layer was designed to provide precise memory management over OpenFlux objects)
  
7. Advancement of the internal Python related module packaging
  
8. Support writing pure Python custom "functionObject"s


---------------------------------------------------------------------------
New Features and Important Changes, r8.2-hybrid vs r8.1-Elvis

Author(s) :  Alexey PETROV

2011-07-04

1. To support compilation for third-party pythonFlu extensions. 
   You can use pythonFlu to wrap third-party C++ functionality.


---------------------------------------------------------------------------
New Features and Important Changes, r8.1-Elvis vs r8.0

Author(s) :  Alexey PETROV

2011-05-27

1. Name this release after the person who believed in this project 
   and inspired us continue its developement. Thank you "Elvis"!

2. Extracting Python solvers from the initial pythonFlu distribution.
   Since "Elvis" release pythonFlu kernel fucntionality and 
   corresponding Python solvers, that demonstrates this wrapping,
   will be advanced and ditributed separately. We encourage all
   pythonFlu users to follow this practise.
  
   Look at http://pythonflu.wikidot.com/solvers to see the avaialbe
   solvers

   Look at http://pythonflu.wikidot.com/install-solvers to learn
   how to install them

3. The following 7 new solvers were implemented in Python :

   - compressible / rhoPorousMRFPimpleFlux

   - incompressible / porousSimpleFlux

   - heatTransfer / buoyantPimpleFlux

   - multiPhase / compressibleInterFlux, interDyMFlux

   - multiPhase / twoLiquidMixingFlux (thanks to Dhasthagheer)

   - DNS / dnsFlux

4. The whole pythonFlu wrapping scheme were revised, as result size 
   of the corresponding binary packages were decresed in 3 - 5 times
   and amount of RAM needed to compile them decreased in about 2 times

5. pythonflu.wikidot.com web-site were updated to discuss in details 
   "installation from sources" procedure. Corresponding information
   can be found at http://pythonflu.wikidot.com/install-sources


---------------------------------------------------------------------------
New Features and Important Changes, r8.0 vs r7.4

Author(s) :  Alexey PETROV

2011-04-04

1. Porting to the latest OpenFlux version 
   (OpenCFD 1.7.1 & Extended 1.6-ext)

2. "Maturity" of the wrapping increased in 2 times and reached 41% 
   (it is possible to reproduce 26 of 63 referenced OpenFlux solvers)

3. Preparation of native Linux binary packages
   (for Ubuntu and SUSE Linux, i386 and amd64 architectures)

4. Minor bug fixing
   (all Python solvers give the same output results as the referenced C++ 
   ones)


---------------------------------------------------------------------------
New Features and Important Changes, r7.4 vs r7.3

Author(s) :  Alexey PETROV

2010-04-04

1. Adjusting to the "common configuration system" (confFlu package)
--------------------------------------------------------------------
"confFlu" is a "common configuration package" for the realted OpenFlux (Open
Source CFD Toolbox, see http://sourceforge.net/projects/Flux/ ) developement. 
The neccessity for defintion of such kind of functionality appears from the
issue that OpenFlux referece build system does not provide corresponding
capabilities. As result of lack of the configuration capabilties OpenFlux
users/developers strugle with compilation procidure trying to discover reasons
for this or that failure.

"confFlu" proposed implementation based on standard Linux/UNIX "GNU automake"
tools. This set of tools allow users adjust the environment they are going to
use for compilation of sources and check, wheter everything is correct, before
starting actual compilation. As result, users become aware of the all
prerequisites needed to compile the given sources and directly informed if
something is wrong.

2. Restoring the support for "singlelib" disabled compilation
-------------------------------------------------------------
"singlelib" mode of compilation allows dramaticaly reduce the compilation time 
(up to 10 times, for now) by combining all the avaialble pyFlux SWIG packages 
into single library. This feature is especially important when users are trying 
to advance the pyFlux, by wrapping missed OpenFlux functionality or extending 
existing OpenFlux API with features they like.

At the same time this feature is disabled by default to keep modularisation 
capabilties of the current pyFlux implementation. It means, that each package 
should have the same dependencies as the referenced OpenFlux once. So, users 
will be able to load and use only functionality they need.


---------------------------------------------------------------------------
New Features and Important Changes, r7.3 vs r5.0

Author(s) :  Alexey PETROV

2010-03-19

1. Support for definition of the derived Python classes
-------------------------------------------------------
pyFlux users can define derived classes from corresponding C++ ones. This 
feature is extremely usefull when users are trying to define their own
implementation of "fvPathFields". This also means, that pyFlux could be used as
a fullgrown developement platform for the OpenFlux developement.

2. Support for "constructor to table" OpenFlux feature
-------------------------------------------------------
OpenFlux implementation defines its own "plugin" system, also known as 
"constructor to table" feture; when derived functionality can be instateated 
and be used by its name. Now it is possible as to write your own derived classes
in pure Python, as to register it into corresponding OpenFlux "factory". This 
also means, that pyFlux could be used as a fullgrown developement platform for 
the OpenFlux developement.


---------------------------------------------------------------------------
New Features and Important Changes, r5.0 vs r4.0

Author(s) :  Alexey PETROV

2009-08-17

1. Porting to the OpenFlux-1.6
-------------------------------
This version of OpenFlux swigging can produce Python wrapping for every 
official OpenFlux version since 1.4.1. The most important thing that this 
wrapping support the same Python API for every OpenFlux version. So, 
the Python user code need not to be modified to follow the pure C++ OpenFlux
modifications.

2. Reducing / precising binary dependecies
-------------------------------
Since this version, every sub package can introduce its own third-party 
dependecies. As an example it is possible to check the following packages:
  - src (which used customized version of "include.makefile" -
  "src.include.makefile")

  - Flux/application/utilities/postProcessing/graphics (which is responsible
  for Flux2vtk wrapping; introduces VTK dependencies)

  - /Flux/applications/utilities/mesh/conversion/ (which is responsible for
  unv2Flux wrapping; introduces VTK dependencies) 

As an implicit result, "Flux.OpenFlux" Python module now dependes only from
corresponding C++ OpenFlux library, as well as "Flux.finiteVolume" Python
module dependes from C++ finiteVolume one and so on.


2. Wrapping of the new third-party package - unv2Flux
-------------------------------
The "unv2Flux" - package is based on the existing since OpenFlux-1.5 -
"ideasUnvToFlux" command line utility. Been repackaged it provide the ability
to create corresponding Flux::fvMesh in memory.

The packaging for the Python related utilities was adjustied with
corresponding OpenFlux/application/utilities.


---------------------------------------------------------------------------
New Features and Important Changes, r4.0 vs r2.0

Author(s) :  Alexey PETROV

2009-08-17

1. Providing OpenFlux related packaging
-------------------------------
This version generates its SWIG libraries into the same OpenFlux does. For
example, it provides "OpenFlux" and "fintiteVolume" Python libraries which
include all related functionality. These libraries can be accessed through the
special Python module - "Flux", which simulates the C++ "Flux" namespace. The
same things are done for "fvc" and "fvm" namespaces, which are represented by
different libraries. So, user can explicitly control what functionality he is
going to use, minimize dependencies and clarify its Python code.


2. Wrapping of the third-party packages (Flux2vtk)
-------------------------------
Since this version, pyFlux will include wrapping of C++ functionality which
as extends the existing OpenFlux API as introduce a completely new
functionality.

"Flux2vtk" Python package will provide the ability to map the Flux field data
to the native VTK data structures in memory (which can be easily displayed after). It is
based on the existing OpenFlux's vtkFlux package.

3. Moving complex test cases to special package - IFlux
-------------------------------
IFlux - is defined as a separate software package which will be responsible
for "hybrid scripting"; it will provide a design solution for intergration of
different application and technologies (like SALOME, OpenFlux and Star-CDF++)
for defintion of an integrated user environment for calculation and solver developing.


---------------------------------------------------------------------------
Author(s) :  Alexey PETROV

2009-04-15

1. Introduction
---------------
This document briefly explains some of the most important changes made
since the release of pyFlux-r1.0. The goal is to provide information for
people who want to upgrade an older pyFlux interface to the new version.

2. 'Hybrid scripting' capabilities
-------------------------------
The contains examples how to orginze interaction with SALOME from within 
Python code.

3. Post-processing capabilities
-------------------------------
The contains example how to publish intetmediate solver results to 
SALOME VISU module.


---------------------------------------------------------------------------
