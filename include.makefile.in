## pythonFlu - Python wrapping for OpenFOAM C++ API
## Copyright (C) 2010- Alexey Petrov
## Copyright (C) 2009-2010 Pebble Bed Modular Reactor (Pty) Limited (PBMR)
## 
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
## 
## See http://sourceforge.net/projects/pythonflu
##
## Author : Alexey PETROV
##


#--------------------------------------------------------------------------------------
__FOAM_VERSION__ := @FOAM_VERSION@

__FOAM_BRANCH__ := @FOAM_BRANCH@


#--------------------------------------------------------------------------------------
__CPPFLAGS__:=$(__CPPFLAGS__) @OPENFOAM_CPPFLAGS@ @PYTHON_CPPFLAGS@ @PYTHON_CXXFLAGS@ -I@abs_top_builddir@ -I/usr/include -I/usr/include/c++ 

__LDFLAGS__:=$(__LDFLAGS__) @OPENFOAM_LDFLAGS@ @OPENFOAM_LIBS@ @PYTHON_LDFLAGS@ -lstdc++


#--------------------------------------------------------------------------------------
subdirs := $(shell find -maxdepth 1 -type d)
subdirs := $(subst ./,,$(subdirs))
subdirs := $(subst CVS,,$(subdirs))
subdirs := $(subst cvs,,$(subdirs))
subdirs := $(subst .svn,,$(subdirs))
subdirs := $(subst .,,$(subdirs))

SUBDIRS = $(subdirs)


#--------------------------------------------------------------------------------------
ifeq "@COMPILE_EMBEDDED_CXX@xx" "yesxx"
sources = $(wildcard *.cxx)
else
sources = $(filter-out emb_%.cxx,$(wildcard *.cxx))
endif

apps = $(patsubst %.cxx, %.exe, $(sources))
libs = $(patsubst %.cxx, _%.so, $(sources))
objs = $(patsubst %.cxx, %.o, $(sources))
stubs = $(patsubst %.cxx, %.cc, $(sources))
pyths = $(patsubst %.cxx, %.py, $(sources))
tests = $(patsubst %.py, %.pyc, $(wildcard test_*.py))


#--------------------------------------------------------------------------------------
RECURSIVE_TARGETS = all-recursive test-recursive

all: $(libs) $(apps) $(objs) $(stubs) $(tests) all-recursive
	@echo output : $(sources) $(pyths) $(tests)

test: $(pyths) test-recursive

$(RECURSIVE_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    break; \
	  fi; \
	  if ! test -f "$$subdir/Makefile"; then \
	    break; \
	  fi; \
	  echo "(cd $$subdir && $(MAKE) $$target)"; \
	  (cd $$subdir && $(MAKE) $$target) \
	  || eval $$failcom; \
	done; \


#--------------------------------------------------------------------------------------
RECURSIVE_CLEAN_TARGETS = clean-recursive

clean: clean-recursive
	rm -fr $(apps) $(libs) $(objs) $(stubs) $(pyths) *.h *.pyc *.d *~

$(RECURSIVE_CLEAN_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  if test "$$subdir" = "."; then \
	    break; \
	  fi; \
	  if ! test -f "$$subdir/Makefile"; then \
	    break; \
	  fi; \
	  echo "(cd $$subdir && $(MAKE) $$target)"; \
	  (cd $$subdir && $(MAKE) $$target) \
	  || eval $$failcom; \
	done && test -z "$$fail"


#--------------------------------------------------------------------------------------
__HEADER_PATH_SUFFIXES__ := @HEADER_PATHS@

__HEADER_PATHS__ := $(foreach path,$(__HEADER_PATH_SUFFIXES__),$(addprefix -I@abs_top_builddir@,$(path)))

__SWIG_INCLUDES__ += $(__HEADER_PATHS__)


#--------------------------------------------------------------------------------------------
__SWIG_INCLUDES__ += $(__CPPFLAGS__)

__SWIG_FLAGS__ += -python -c++ -MMD

__SWIG_FLAGS__ += -D__restrict__ # GCC type qualifier (a non-standard GCC entention) - to avoid SWIG parsing errors

# CINT is an interpreter for C and C++ code (its parsing requirements are very close to SWIG)
# to use existing adoption of OpenFOAM code to simplify SWIG wrapping
# (http://root.cern.ch/drupal/content/cint)
ifeq "$(shell if [ ${__FOAM_VERSION__} -eq 010500 ]; then echo 'true'; else echo 'false'; fi )" "true" 
__SWIG_FLAGS__ += -D__CINT__ 
endif

__SWIG_FLAGS__ += @OPENFOAM_GFLAGS@ $(__SWIG_INCLUDES__)

__SWIG_FLAGS__+=-w508 # Declaration of 'XXX' shadows declaration accessible via 'YYY"
__SWIG_FLAGS__+=-w317 # Specialization of non-template 'XXX'
__SWIG_FLAGS__+=-w312 # Nested class not currently supported (ignored)
__SWIG_FLAGS__+=-w509 # Overloaded method 'XXX' is shadowed by 'YYY'
__SWIG_FLAGS__+=-w503 # Can't wrap 'XXX' unless renamed to a valid identifier
__SWIG_FLAGS__+=-w462 # Unable to set dimensionless array variable
__SWIG_FLAGS__+=-w473 # Returning a pointer or reference in a director method is not recommended

#-debug-top 4 -directors -dirprot


#--------------------------------------------------------------------------------------
%.cc : %.cxx
	@SWIG@ $(__SWIG_FLAGS__) -module $(patsubst %.cxx,%,$<) -o $@ $<

%.o : %.cpp

%.o : %.cc
	gcc @OPENFOAM_CXXFLAGS@  $(__CPPFLAGS__) "-I." "-D DIRECTOR_INCLUDE=<$(patsubst %.cc,%.h,$<)>" -c $< -o $@


-include $(wildcard *.d) dummy

_%.so : %.o
	@OPENFOAM_LINKLIBSO@ $< $(__LDFLAGS__) -o $@

__APP_FLAGS__ = $(__LDFLAGS__)

%.exe : %.o
	gcc $< $(__APP_FLAGS__) -o $@
#	python `basename $@ exe`py

%.pyc : %.py
	@python -c "import py_compile; py_compile.compile('$<')"
	@python ./$@


#--------------------------------------------------------------------------------------
