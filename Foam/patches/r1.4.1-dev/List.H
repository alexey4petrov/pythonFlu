/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 1991-2007 OpenCFD Ltd.
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Class
    List<T>

Description
    List<T> is a 1D vector of objects of type T, where the size of the vector
    is known and used for subscript bounds checking, etc.  Storage is allocated
    on free-store during construction.

SourceFiles
    List.C
    ListI.H
    ListIO.C

\*---------------------------------------------------------------------------*/

#ifndef List_H
#define List_H

#include "UList.H"
#include "autoPtr.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

class Istream;
class Ostream;

// * * * * * * Forward declaration of template friend fuctions * * * * * * * //

template<class T> class List;

template<class T> Istream& operator>>(Istream&, List<T>&);

template<class T, label Size> class FixedList;
template<class T> class PtrList;
template<class T> class SLList;
template<class T> class IndirectList;
template<class T> class BiIndirectList;


/*---------------------------------------------------------------------------*\
                           Class List Declaration
\*---------------------------------------------------------------------------*/

template<class T>
class List
:
    public UList<T>
{

public:

    // Constructors

        //- Null constructor.
        inline List();

        //- Construct with given size.
        explicit List(const label);

        //- Construct with given size and value for all elements.
        List(const label, const T&);

        //- Copy constructor.
        List(const List<T>&);

        //- Construct as copy or re-use as specified.
        List(List<T>&, bool reUse);

        //- Construct given size and start and end iterators.
        template<class InputIterator>
        List(InputIterator first, InputIterator last);

        //- Construct as copy of FixedList<T, Size>
        template<label Size>
        List(const FixedList<T, Size>&);

        //- Construct as copy of PtrList<T>
        List(const PtrList<T>&);

        //- Construct as copy of SLList<T>
        List(const SLList<T>&);

        //- Construct as copy of IndirectList<T>
        List(const IndirectList<T>&);

        //- Construct as copy of BiIndirectList<T>
        List(const BiIndirectList<T>&);

        //- Construct from Istream.
        List(Istream&);

        //- Clone
        inline autoPtr<List<T> > clone() const;


    // Destructor

        ~List();


    // Related types

        //- Declare type of subList
        typedef SubList<T> subList;


    // Member functions

        //- Return a null List
        static List<T>& null();


        // Edit

            //- Reset size of List.
            void setSize(const label);

            //- Reset size of List and value for new elements.
            void setSize(const label, const T&);

            //- Clear the list, i.e. set size to zero.
            void clear();

            //- Transfer the contents of the argument List into this List
            //  and annull the argument list.
            void transfer(List<T>&);

            //- Return subscript-checked element of UList.
            inline T& newElmt(const label);


    // Member operators

        //- Assignment from UList operator. Takes linear time.
        void operator=(const UList<T>&);

        //- Assignment operator. Takes linear time.
        void operator=(const List<T>&);

        //- Assignment from SLList operator. Takes linear time.
        void operator=(const SLList<T>&);

        //- Assignment from IndirectList operator. Takes linear time.
        void operator=(const IndirectList<T>&);

        //- Assignment from BiIndirectList operator. Takes linear time.
        void operator=(const BiIndirectList<T>&);

        //- Assignment of all entries to the given value
        inline void operator=(const T&);


    // Istream operator
    #ifndef SWIG
        //- Read List from Istream, discarding contents of existing List.
        friend Istream& operator>> <T>(Istream&, List<T>&);
    #endif
};


template<class T>
void sort(List<T>& a);

template<class T, class Cmp>
void sort(List<T>& a, const Cmp&);


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#   include "ListI.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
#   include "List.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
