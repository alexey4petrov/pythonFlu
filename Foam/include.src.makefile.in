## pythonFlu - Python wrapping for OpenFOAM C++ API
## Copyright (C) 2010- Alexey Petrov
## Copyright (C) 2009-2010 Pebble Bed Modular Reactor (Pty) Limited (PBMR)
## 
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
## 
## See http://sourceforge.net/projects/pythonflu
##
## Author : Alexey PETROV
##


#--------------------------------------------------------------------------------------
include $(pythonflu_root_dir)/Foam/foam.version.makefile


#--------------------------------------------------------------------------------------
__CPPFLAGS__ := $(__CPPFLAGS__) \
	@OPENFOAM_FINITEVOLUME_CPPFLAGS@ \
	@OPENFOAM_SAMPLING_CPPFLAGS@ \
	@OPENFOAM_BASICTHERMOPHYSICALMODELS_CPPFLAGS@ \
	@OPENFOAM_MESHTOOLS_CPPFLAGS@ \
	@OPENFOAM_TURBULENCEMODELS_CPPFLAGS@ \
	@OPENFOAM_INCOMPRESSIBLETURBULENCEMODELS_CPPFLAGS@ \
	@OPENFOAM_COMPRESSIBLETURBULENCEMODELS_CPPFLAGS@ \
	@OPENFOAM_RADIATION_CPPFLAGS@ \
	@OPENFOAM_INCOMPRESSIBLETRANSPORTMODELS_CPPFLAGS@ \
	@OPENFOAM_INTERFACEPROPERTIES_CPPFLAGS@ \
	@OPENFOAM_TRANSPORTMODELS_CPPFLAGS@ \
	@OPENFOAM_DYNAMICFVMESH_CPPFLAGS@ \
	@OPENFOAM_DYNAMICMESH_CPPFLAGS@ \
	@OPENFOAM_RANDOMPROCESS_CPPFLAGS@ \
	@OPENFOAM_SPECIE_CPPFLAGS@ \
	@MANAGEDFLU_OPENFOAM_CPPFLAGS@ \
	@MANAGEDFLU_FINITEVOLUME_CPPFLAGS@ \
	@MANAGEDFLU_INCOMPRESSIBLETRANSPORTMODELS_CPPFLAGS@ \
	@MANAGEDFLU_BASICTHERMOPHYSICALMODELS_CPPFLAGS@ \
	@MANAGEDFLU_RADIATIONMODELS_CPPFLAGS@ \
	@MANAGEDFLU_COMPRESSIBLETURBULENSEMODELS_CPPFLAGS@ \
	@MANAGEDFLU_INCOMPRESSIBLETURBULENSEMODELS_CPPFLAGS@



#--------------------------------------------------------------------------------------
__LDFLAGS__ := $(__LDFLAGS__) \
	@OPENFOAM_FINITEVOLUME_LIBS@ \
	@OPENFOAM_SAMPLING_LIBS@ \
	@OPENFOAM_BASICTHERMOPHYSICALMODELS_LIBS@ \
	@OPENFOAM_MESHTOOLS_LIBS@ \
	@OPENFOAM_TURBULENCEMODELS_LIBS@ \
	@OPENFOAM_INCOMPRESSIBLETURBULENCEMODELS_LIBS@ \
	@OPENFOAM_COMPRESSIBLETURBULENCEMODELS_LIBS@ \
	@OPENFOAM_RADIATION_LIBS@ \
	@OPENFOAM_INCOMPRESSIBLETRANSPORTMODELS_LIBS@ \
	@OPENFOAM_INTERFACEPROPERTIES_LIBS@ \
	@OPENFOAM_TRANSPORTMODELS_LIBS@ \
	@OPENFOAM_DYNAMICFVMESH_LIBS@ \
	@OPENFOAM_DYNAMICMESH_LIBS@ \
	@OPENFOAM_RANDOMPROCESS_LIBS@ \
	@OPENFOAM_SPECIE_LIBS@ \
	@MANAGEDFLU_OPENFOAM_LIB@ \
	@MANAGEDFLU_FINITEVOLUME_LIB@ \
	@MANAGEDFLU_INCOMPRESSIBLETRANSPORTMODELS_LIB@ \
	@MANAGEDFLU_BASICTHERMOPHYSICALMODELS_LIB@ \
	@MANAGEDFLU_RADIATIONMODELS_LIB@ \
	@MANAGEDFLU_COMPRESSIBLETURBULENSEMODELS_LIBS@ \
	@MANAGEDFLU_INCOMPRESSIBLETURBULENSEMODELS_LIBS@


#--------------------------------------------------------------------------------------
sources = $(filter-out emb_%.cxx,$(wildcard *.cxx))

ifeq (`uname -s`,Darwin)
  #use util from MacPorts
  FIND=gfind
else
  FIND=find
endif

subdirs := $(shell $(FIND) -maxdepth 1 -type d)
subdirs := $(subst ./,,$(subdirs))
subdirs := $(subst CVS,,$(subdirs))
subdirs := $(subst cvs,,$(subdirs))
subdirs := $(subst .svn,,$(subdirs))
subdirs := $(subst .,,$(subdirs))

SUBDIRS = $(subdirs)

apps = $(patsubst %.cxx, %.exe, $(sources))
libs = $(patsubst %.cxx, _%.so, $(sources))
objs = $(patsubst %.cxx, %.o, $(sources))
stubs = $(patsubst %.cxx, %.cc, $(sources))
pyths = $(patsubst %.cxx, %.py, $(sources))
tests = $(patsubst %.py, %.pyc, $(wildcard test_*.py))


#--------------------------------------------------------------------------------------
RECURSIVE_TARGETS = all-recursive test-recursive

all: $(libs) $(apps) $(objs) $(stubs) $(tests) all-recursive
	@echo output : $(sources) $(pyths) $(tests)

test: $(pyths) test-recursive

$(RECURSIVE_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    break; \
	  fi; \
	  if ! test -f "$$subdir/Makefile"; then \
	    break; \
	  fi; \
	  echo "(cd $$subdir && $(MAKE) $$target)"; \
	  (cd $$subdir && $(MAKE) $$target) \
	  || eval $$failcom; \
	done; \


#--------------------------------------------------------------------------------------
RECURSIVE_CLEAN_TARGETS = clean-recursive

clean: clean-recursive
	rm -fr $(apps) $(libs) $(objs) $(stubs) $(pyths) *.h *.pyc *.d *~

$(RECURSIVE_CLEAN_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  if test "$$subdir" = "."; then \
	    break; \
	  fi; \
	  if ! test -f "$$subdir/Makefile"; then \
	    break; \
	  fi; \
	  echo "(cd $$subdir && $(MAKE) $$target)"; \
	  (cd $$subdir && $(MAKE) $$target) \
	  || eval $$failcom; \
	done && test -z "$$fail"


#--------------------------------------------------------------------------------------
include $(pythonflu_root_dir)/Foam/include.base.makefile


#--------------------------------------------------------------------------------------
%.o : %.cc
	$(CC) @OPENFOAM_CXXFLAGS@  $(__CPPFLAGS__) "-I." "-D DIRECTOR_INCLUDE=<$(patsubst %.cc,%.h,$<)>" -c $< -o $@

__APP_FLAGS__ = $(__LDFLAGS__)

_%.so : %.o
	@OPENFOAM_LINKLIBSO@ $< $(__LDFLAGS__) -o $@
	$(CC) $< $(__APP_FLAGS__) -o $(patsubst %.o,%.exe,$<)


#--------------------------------------------------------------------------------------
